import mkdirp from "mkdirp";
import fs from "fs";
import path from "path";
import tplFile from "template-file";
import clc from "cli-color";

export const renderTemplateFile = async path => {
  const data = {
    header: "* This file was generated by graphql-yoga-waterline package"
  };
  return await tplFile.renderTemplateFile(path, data);
};

const replaceApi = aPath => {
  return aPath
    .replace("api/", clc.red("api/"))
    .replace("models/", clc.yellow("models/"))
    .replace("policies/", clc.yellow("policies/"))
    .replace("resolvers/", clc.yellow("resolvers/"))
    .replace("schema/", clc.yellow("schema/"));
};
const replaceConfig = aPath => {
  return aPath.replace("config/", clc.blue("config/"));
};

export const generateFolderAtPath = async (absPath, silent = false) => {
  return new Promise(resolve => {
    mkdirp(absPath, async (err, success) => {
      if (err) {
        // throw new Error(err);
      }
      if (success && silent !== true) {
        console.log(
          "generated missing folder: ",
          clc.blue(path.basename(absPath)),
          " => ",
          replaceConfig(replaceApi(absPath + "/")),
          ""
        );
      }
      const gitKeepMessage = `###########################
### auto generated file ###\n###########################
# This file was created, because the folder did not exist.
# To ensure, the folder persits in your SVN, this .gitkeep file is created
`;
      await generateFileAtPathWithContent(
        path.join(absPath, "/.gitkeep"),
        gitKeepMessage,
        true
      );
      resolve(true);
    });
  });
};

export const generateFileAtPathWithContent = async (
  absPathToFile,
  content,
  silent = false
) => {
  return new Promise(resolve => {
    fs.writeFile(absPathToFile, content, { flag: "wx" }, (err, success) => {
      if (err) {
        // throw new Error(err);
      } else {
        if (silent !== true) {
          const file = path.basename(absPathToFile);
          const folder = path.basename(path.dirname(absPathToFile));
          const rest = path.dirname(path.dirname(absPathToFile));
          console.log(
            "generated missing file:   ",
            clc.green(file),
            " => ",

            replaceConfig(replaceApi(path.dirname(absPathToFile) + "/")) +
              clc.green(file),
            ""
          );
        }
      }

      resolve(true);
    });
  });
};

export const readFileAtPath = async absPathToFile => {
  return new Promise(resolve => {
    fs.readFile(absPathToFile, "utf8", (err, data) => {
      resolve(data);
    });
  });
};
